{"version":3,"sources":["services/repository.js","components/OrdersView.js","services/auth.js","components/employeeLogin.js","App.js","serviceWorker.js","index.js"],"names":["advanceState","id","status","axios","put","then","response","data","OrdersView","state","orders","user","props","restaurantPrefix","updateOrders","event","order","_id","fetchOrders","this","post","setState","result","items","map","item","name","Object","entries","key","uuid","join","length","className","subOrderId","subTotal","createdAt","split","substring","calculateQuantiny","Button","to","onClick","React","Component","employeeLogin","username","password","catch","err","Login","message","handleChange","target","value","handleSubmit","preventDefault","setUser","history","push","Form","onSubmit","Group","Label","htmlFor","Control","type","onChange","Alert","variant","App","render","exact","path","Boolean","window","location","hostname","match","get","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.d4f568f4.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport function getCartData(cart) {\n  return axios\n    .post('/api/cart', { cart })\n    .then(response => response.data)\n    .catch(err => {\n      console.log(err);\n    });\n}\n\nexport function getProducts() {\n  return axios.get('/api/menu').then(response => {\n    return response.data;\n  });\n}\n\nexport function placeOrder(order, total, deliveryAddress, place_id) {\n  return axios\n    .post('/api/cart/order', { order, total, deliveryAddress, place_id })\n    .then(response => {\n      return response.data;\n    })\n    .catch(err => {\n      console.log(err);\n    });\n}\n\nexport function getSubOrders(restaurantPrefix) {\n  return axios.post('/api/suborders', { restaurantPrefix }).then(response => {\n    return response.data;\n  });\n}\n\nexport function advanceState(id, status) {\n  return axios.put('/api/suborders/advance', { id, status }).then(response => {\n    return response.data;\n  });\n}\n","import React from 'react';\nimport { getSubOrders, advanceState } from '../services/repository';\nimport { Button } from 'react-bootstrap';\nimport { v4 as uuid } from 'uuid';\n\nexport default class OrdersView extends React.Component {\n  state = {\n    orders: [],\n    user: this.props.user,\n    restaurantPrefix: 'RIC',\n  };\n\n  componentDidMount() {\n    this.fetchOrders();\n  }\n\n  fetchOrders() {\n    getSubOrders(this.state.restaurantPrefix).then(orders => {\n      this.setState({ orders });\n    });\n  }\n\n  updateOrders = (event, order) => {\n    if (order.status === 'placed') {\n      advanceState(order._id, 'inPreparation').then(this.fetchOrders());\n    }\n    if (order.status === 'inPreparation') {\n      advanceState(order._id, 'outForDelivery').then(this.fetchOrders());\n    }\n    if (order.status === 'outForDelivery') {\n      advanceState(order._id, 'Delivered').then(this.fetchOrders());\n    }\n  };\n\n  calculateQuantiny(order) {\n    let result = {};\n    order.items.map(item => (result[item.name] ? result[item.name]++ : (result[item.name] = 1)));\n    return (\n      <ul>\n        {Object.entries(result).map(item => (\n          <li key={uuid()}>{item.join(': ')}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    const { orders } = this.state;\n    if (orders.length === 0) {\n      return (\n        <>\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <h3>No orders at the moment</h3>\n        </>\n      );\n    } else\n      return (\n        <div className=' container'>\n          <h2>Pending orders</h2>\n          {orders.map(order => (\n            <div key={uuid()}>\n              <br />\n              <h4>Order ID: {order.subOrderId}</h4>\n              <h4>Order Status: {order.status}</h4>\n              <h4>Subtotal: â‚¬{order.subTotal}</h4>\n              <h4>Created at: {order.createdAt.split('T')[1].substring(0, 8)}</h4>\n              <h4>Order Items: {this.calculateQuantiny(order)}</h4>\n              <Button to='/' onClick={event => this.updateOrders(event, order)}>\n                Change order status\n              </Button>\n              <br />\n              <br />\n            </div>\n          ))}\n        </div>\n      );\n  }\n}\n","import axios from 'axios';\r\n\r\nconst signup = (firstName, lastName, email, password, address, placeId) => {\r\n  return axios\r\n    .post('/api/auth/signup', { firstName, lastName, email, password, address, placeId })\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .catch(err => {\r\n      return err.response.data;\r\n    });\r\n};\r\n\r\nconst login = (username, password) => {\r\n  return axios\r\n    .post('/api/auth/login', { username, password })\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .catch(err => {\r\n      return err.response.data;\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n  return axios\r\n    .delete('/api/auth/logout')\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .catch(err => {\r\n      return err.response.data;\r\n    });\r\n};\r\n\r\nconst employeeLogin = (username, password) => {\r\n  return axios\r\n    .post('/api/employee/auth/login', { username, password })\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n    .catch(err => {\r\n      return err.response.data;\r\n    });\r\n};\r\n\r\nexport { signup, login, logout, employeeLogin };\r\n","import React, { Component } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { employeeLogin } from '../services/auth';\r\n\r\nexport default class Login extends Component {\r\n  state = {\r\n    username: '',\r\n    password: '',\r\n    message: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { username, password } = this.state;\r\n\r\n    employeeLogin(username, password).then(data => {\r\n      if (data.message) {\r\n        this.setState({\r\n          message: data.message,\r\n          username: '',\r\n          password: '',\r\n        });\r\n      } else {\r\n        // successfully logged in\r\n        // update the state for the parent component\r\n        this.props.setUser(data);\r\n        this.props.history.push('/orders');\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2>Employee Login</h2>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label htmlFor='username'>Username: </Form.Label>\r\n            <Form.Control type='text' name='username' value={this.state.username} onChange={this.handleChange} id='username' />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label htmlFor='password'>Password: </Form.Label>\r\n            <Form.Control type='password' name='password' value={this.state.password} onChange={this.handleChange} id='password' />\r\n          </Form.Group>\r\n          {this.state.message && <Alert variant='danger'>{this.state.message}</Alert>}\r\n          <Button type='submit'>Login</Button>\r\n        </Form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport OrdersView from './components/OrdersView'\nimport Login from './components/employeeLogin'\n\n\nexport default class App extends React.Component {\n  state = {\n    user: this.props.user,\n    message: '',\n    order: '',\n  };\n\n  setUser = user => {\n    this.setState({\n      user: user,\n    });\n  };\n\n  render = () => {\n    return (\n      <div className='App'>\n        <Route exact path='/' render={props => <Login setUser={this.setUser} user={this.state.user} {...props} />} />\n        <Route exact path='/orders' render={props => <OrdersView setUser={this.setUser} {...props} />} />\n      </div>\n    );\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport axios from 'axios';\r\n\r\naxios.get('/api/auth/loggedin').then(response => {\r\n  const user = response.data;\r\n  ReactDOM.render(\r\n    <BrowserRouter>\r\n      <App user={user} />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n});\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}